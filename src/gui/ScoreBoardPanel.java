package gui;

import ScoreLogic.ScoreBoardLogic;
import model.Score;
import model.User;

import javax.imageio.ImageIO;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;

/**
 * Gui class to show scoreboard
 * @author Michal Glodek
 */
public class ScoreBoardPanel extends javax.swing.JPanel {
    /** Scoreboard instance it can be created only once */
    private static final ScoreBoardPanel INSTANCE = new ScoreBoardPanel();
    /** Image for background */
    private Image img;
    /** Object used for manage score database */
    private final ScoreBoardLogic scoreBoardLogic = new ScoreBoardLogic();
    /** Score that player got after game (optional) */
    private int score;

    /**
     * Creates new form ScoreBoardPanel and sets background
     */
    private ScoreBoardPanel() {
        try {
            img = ImageIO.read(getClass().getResource("/gui/Graphics/menuGraphic.jpg"));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        initComponents();
    }

    /**
     * Returns ScoreBoardPanel instance (singleton-eager) without score after game
     */
    public static ScoreBoardPanel getInstance(){
        INSTANCE.showScoreList();
        INSTANCE.repaint();
        INSTANCE.setVisibility(false);
        return INSTANCE;
    }

    /**
     * Returns ScoreBoardPanel instance (singleton-eager) with score after game
     * @param score
     */
    public static ScoreBoardPanel getInstance(int score){
        INSTANCE.saveScoreButon.setEnabled(true);
        INSTANCE.showScoreToUser(score);
        INSTANCE.score = score;
        INSTANCE.showScoreList();
        INSTANCE.repaint();
        INSTANCE.setVisibility(true);
        return INSTANCE;
    }

    /**
     * Show on gui player's score
     * @param score
     */
    private void showScoreToUser(int score){
        scoreLabel.setText("Your score: " + score);
    }

    /**
     * Sets app look for user
     * who only want to see scores visibilityMod == false
     * or who want to see his score and save it visibilityMod == true
     * @param visibilityMod
     */
    private void setVisibility(boolean visibilityMod){
        INSTANCE.scoreLabel.setVisible(visibilityMod);
        INSTANCE.userLabel.setVisible(visibilityMod);
        INSTANCE.saveScoreButon.setVisible(visibilityMod);
        INSTANCE.jScrollPane1.setVisible(visibilityMod);
    }

    /**
     * Get lit from scoreBoardLogic and show it to user
     */
    private void showScoreList(){
        List<Score> scores = scoreBoardLogic.getSortedScoreList();
        Object[][] data = getScoresArray(scores);
        scoreTable.setModel(new DefaultTableModel(data,
                new String [] {
                "No.", "User", "Score", "Date"
        }) {
            @Override
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        });
    }

    /**
     * Return table ready tu use in Jtable
     * @param scores scores list from ScoreBoardLogic
     */
    private Object[][] getScoresArray(List<Score> scores){
        Object[][] returnArray = new Object[scores.size()][4];
        for(int i = 0; i < scores.size(); i++){
            Score bufScore = scores.get(i);
            returnArray[i][0] = i+1;
            returnArray[i][1] = bufScore.getUser().getName();
            returnArray[i][2] = bufScore.getScore();
            returnArray[i][3] = bufScore.getDate().toString();

        }
        return returnArray;
    }

    /**
     * Adds score and username from userNameTextArea to database
     */
    private void addUserWithScore(){
        String userName = this.userNameTextArea.getText();
        if(userName == null || userName.equals("")){
            this.userNameTextArea.setText("User can't be null!");
        }else{
            User user = scoreBoardLogic.getSpecificUser(userName);
            if(user == null){
                User newUser = new User(userName);
                scoreBoardLogic.insertScoreAndUser(new Score(LocalDate.now(), score, newUser));
            } else{
                scoreBoardLogic.insertScoreAndUser(new Score(LocalDate.now(), score, user));
            }
            saveScoreButon.setEnabled(false);
            userNameTextArea.setText("");
            showScoreList();
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        // Draws the img to the BackgroundPanel.
        if (img != null) {
            g.drawImage(img, 0, 0, null);
        }
    }

    public Dimension getPreferredSize() {
        return img == null ? super.getPreferredSize() : new Dimension(img.getWidth(this), img.getHeight(this));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        saveScoreButon = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userNameTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        scoreLabel = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setToolTipText("");
        setMaximumSize(new java.awt.Dimension(1280, 1024));
        setMinimumSize(new java.awt.Dimension(1280, 1024));
        setPreferredSize(new java.awt.Dimension(1280, 1024));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 96)); // NOI18N
        jLabel1.setText("          SCORE BOARD");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        userLabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        userLabel.setText("User name:");
        userLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        userLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        saveScoreButon.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        saveScoreButon.setText("save score");
        saveScoreButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScoreButonActionPerformed(evt);
            }
        });

        userNameTextArea.setColumns(20);
        userNameTextArea.setFont(new java.awt.Font("Monospaced", 0, 48)); // NOI18N
        userNameTextArea.setRows(1);
        jScrollPane1.setViewportView(userNameTextArea);

        scoreTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null}
                },
                new String [] {
                        "No.", "User", "Score", "Date"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scoreTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(scoreTable);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jButton1.setText("Exit to Menu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        scoreLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        scoreLabel.setText("Your score: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(userLabel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(scoreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jScrollPane1))
                                                                .addGap(18, 18, 18)
                                                                .addComponent(saveScoreButon, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(63, 63, 63))))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(292, 292, 292)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(scoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(userLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(saveScoreButon, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                .addGap(36, 36, 36))
        );
    }// </editor-fold>

    /**
     * call method addUserWithScore()
     */
    private void saveScoreButonActionPerformed(java.awt.event.ActionEvent evt) {
        INSTANCE.addUserWithScore();
    }

    /**
     * call method exitToMenu() Window class
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        Window.exitToMenu();
    }


    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    /** (Generated) Button to save score  */
    private javax.swing.JButton saveScoreButon;
    private javax.swing.JLabel scoreLabel;
    /** (Generated) Table for scores */
    private javax.swing.JTable scoreTable;
    private javax.swing.JLabel userLabel;
    /** (Generated) Text area for user name  */
    private javax.swing.JTextArea userNameTextArea;
    // End of variables declaration
}

