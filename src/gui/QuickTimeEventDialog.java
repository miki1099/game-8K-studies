package gui;

import gameLogic.GameLogic;
import lombok.Getter;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.util.Timer;
import java.io.*;
import java.util.Random;
import java.util.TimerTask;

/**
 * Gui class to show quick time event while game
 * @author Michal Glodek
 */
public class QuickTimeEventDialog extends javax.swing.JDialog {

    /** Store correct answer */
    private String correctAns;
    /** path where questions are stored */
    private final String filename = "src/gui/quick-time-questions/questions.que";
    /** It stores impact for climbers  */
    @Getter
    private Short acclimationImpact;
    /** Max time for answer  */
    private final int TIME_FOR_ANSWER = 5000; // 5sec
    /** Timer */
    private Timer timer;
    /**
     * Creates new form QuickTimeEventDialog
     * @param parent frame where to show
     * @param modal is modal
     */
    public QuickTimeEventDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        acclimationImpact = -10;
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        try {
            getQuestion();
        } catch (IOException e) {
            acclimationImpact = 0;
            closeWindow();
        }
    }

    /**
     * call function startTimer and call setVisible JDialog class
     * @param b is visible
     */
    @Override
    public void setVisible(boolean b) {
        startTimer();
        super.setVisible(b);
    }

    /**
     * Starts timer
     */
    private void startTimer(){
        timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                GameLogic.getInstance().setQuickEventAccMod(acclimationImpact);
                closeWindow();
            }
        }, TIME_FOR_ANSWER);

    }

    /**
     * Gets question and answers from txt file
     */
    private void getQuestion() throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(filename));
        String lineBuffer;
        int counter = 0;
        int questionNumber = 0;

        while((lineBuffer = in.readLine()) != null){
            if(counter == 0){
                questionNumber = getRandomQuestion(Integer.parseInt(lineBuffer));
            }
            if(counter == 1 + 5*questionNumber){
                questionLabel.setText(lineBuffer);
            } else if(counter == 2 + 5*questionNumber){
                answerA.setText(lineBuffer);
            } else if(counter == 3 + 5*questionNumber){
                answerB.setText(lineBuffer);
            } else if(counter == 4 + 5*questionNumber){
                answerC.setText(lineBuffer);
            } else if(counter == 5 + 5*questionNumber){
                correctAns = lineBuffer;
                break;
            }
            counter++;
        }

        in.close();
    }

    /**
     * Randomise question to show
     */
    private int getRandomQuestion(int questionsNumber){
        Random rand = new Random();
        return rand.nextInt(questionsNumber);
    }

    /**
     * Button A pressed call function checkAnswer
     */
    private void aButtonActionPerformed(java.awt.event.ActionEvent evt) {
        checkAnswer("A");
    }

    /**
     * Button B pressed call function checkAnswer
     */
    private void bButtonActionPerformed(java.awt.event.ActionEvent evt) {
        checkAnswer("B");
    }

    /**
     * Button C pressed call function checkAnswer
     */
    private void cButtonActionPerformed(java.awt.event.ActionEvent evt) {
        checkAnswer("C");
    }

    /**
     * check answer sets acclimationImpact and close dialog window.
     * @param chosen chosen answer alias
     */
    private void checkAnswer(String chosen){
        JOptionPane.showMessageDialog(null,"Correct answer was " + correctAns);
        if(correctAns.trim().toUpperCase().equals(chosen)){
            acclimationImpact = 0;
        } else{
            acclimationImpact = -10;
        }
        GameLogic.getInstance().setQuickEventAccMod(acclimationImpact);
        closeWindow();
    }

    /**
     * Closes window
     */
    private void closeWindow(){
        timer.cancel();
        QuickTimeEventDialog.this.setVisible(false);
        this.dispose();
        QuickTimeEventDialog.this.dispatchEvent(new WindowEvent(
                QuickTimeEventDialog.this, WindowEvent.WINDOW_CLOSING));
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        bButton = new javax.swing.JButton();
        cButton = new javax.swing.JButton();
        aButton = new javax.swing.JButton();
        questionLabel = new javax.swing.JLabel();
        answerA = new javax.swing.JLabel();
        answerB = new javax.swing.JLabel();
        answerC = new javax.swing.JLabel();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);

        setTitle("Quick Time Event");
        setResizable(false);

        bButton.setText("B");
        bButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bButtonActionPerformed(evt);
            }
        });

        cButton.setText("C");
        cButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cButtonActionPerformed(evt);
            }
        });

        aButton.setText("A");
        aButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aButtonActionPerformed(evt);
            }
        });

        questionLabel.setText("jLabel1");
        questionLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        answerA.setText("jLabel2");

        answerB.setText("jLabel2");

        answerC.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(answerA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(questionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(aButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                                                .addComponent(bButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(48, 48, 48)
                                                .addComponent(cButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(answerB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(answerC, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(answerA, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(answerB, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(answerC, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(aButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(bButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>



    // Variables declaration - do not modify
    /** Choose ans A button */
    private javax.swing.JButton aButton;
    /** Shows answer A */
    private javax.swing.JLabel answerA;
    /** Shows answer B */
    private javax.swing.JLabel answerB;
    /** Shows answer C */
    private javax.swing.JLabel answerC;
    /** Choose ans B button */
    private javax.swing.JButton bButton;
    /** Choose ans C button */
    private javax.swing.JButton cButton;
    /** Shows question */
    private javax.swing.JLabel questionLabel;
    // End of variables declaration
}
